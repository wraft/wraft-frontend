import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import { Input } from 'theme-ui';
import {
  Drawer,
  useDrawer,
  Button,
  Box,
  Flex,
  Text,
  Field,
  InputText,
  Textarea,
  Label,
} from '@wraft/ui';
import { TextT, X as _X } from '@phosphor-icons/react';

import MenuStepsIndicator from 'common/MenuStepsIndicator';
import FieldColor from 'common/FieldColor';
import { ContentType } from 'utils/types';
import { fetchAPI } from 'utils/models';
import { usePermission } from 'utils/permissions';

import Form from './VariantForm';

// Generated by https://quicktype.io

const ContentTypeViewForm = () => {
  const [fields, setFields] = useState([]);
  const [content, setContent] = useState<ContentType | undefined>(undefined);
  const [formStep, setFormStep] = useState<number>(0);
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [rerender, setRerender] = useState<boolean>(false);
  const { hasPermission } = usePermission();

  const mobileMenuDrawer = useDrawer();

  const {
    register,
    formState: { errors },
    setValue,
  } = useForm({});
  const router = useRouter();

  const cId: string = router.query.id as string;

  useEffect(() => {
    if (cId) {
      setValue('edit', cId);
      loadDataDetails(cId);
    }
  }, [cId]);

  useEffect(() => {
    if (cId) loadDataDetails(cId);
  }, [rerender]);

  useEffect(() => {
    const convertedArray = content?.content_type.fields.map((item: any) => {
      return {
        name: item.name,
        value: item,
      };
    });
    setFields(convertedArray);
  }, [content]);

  const setContentDetails = (data: any) => {
    const res: ContentType = data;
    setContent(data);

    if (res && res.content_type) {
      setValue('name', res.content_type.name);
      setValue('description', res.content_type?.description);
      setValue('prefix', res.content_type.prefix);
      setValue('type', res.content_type.type);
      setValue('layout', res.content_type.layout?.name || undefined);
      setValue('flow', res.content_type.flow?.flow?.name || undefined);
      setValue('theme', res.content_type?.theme?.name || undefined);
      setValue('edit', res.content_type.id);
      setValue('color', res.content_type.color);
    }
  };

  const loadDataDetails = (id: string) => {
    fetchAPI(`content_types/${id}`).then((data: any) => {
      setContentDetails(data);
    });
    return false;
  };

  const titles = ['Details', 'Configure', 'Fields'];
  const goTo = (step: number) => {
    setFormStep(step);
  };

  return (
    <>
      <Flex gap="md">
        <MenuStepsIndicator titles={titles} formStep={formStep} goTo={goTo} />
        <Box
          bg="background-primary"
          maxWidth="556px"
          w="40%"
          p="xl"
          h="100%"
          my="md">
          <Box flexGrow={1}>
            <Flex
              direction="column"
              gap="md"
              display={formStep === 0 ? 'flex' : 'none'}>
              <Field label="Name" disabled required>
                <InputText
                  {...register('name')}
                  placeholder="Enter a Variant Name"
                />
              </Field>
              <Field label="Description" disabled required>
                <Textarea
                  {...register('description')}
                  placeholder="Enter a description"
                />
              </Field>
              <Field label="Document Type" disabled required>
                <InputText
                  {...register('type')}
                  placeholder="Select a Document Type"
                />
              </Field>
              <Field label="Prefix" disabled required>
                <InputText
                  {...register('prefix')}
                  placeholder="Enter a prefix"
                />
              </Field>
            </Flex>
            <Flex
              direction="column"
              gap="md"
              display={formStep === 1 ? 'flex' : 'none'}>
              <Box>
                <FieldColor
                  register={register}
                  label="Color"
                  name="color"
                  defaultValue={(content && content?.content_type.color) || ''}
                  view
                />
                {errors.color && errors.color.message && (
                  <Text>{errors.color.message as string}</Text>
                )}
              </Box>
              <Field label="Layout" disabled required>
                <InputText
                  {...register('layout')}
                  placeholder="Enter a Layout"
                />
              </Field>
              <Field label="Flow" disabled required>
                <InputText {...register('flow')} placeholder="Enter a Flow" />
              </Field>
              <Field label="Theme" disabled required>
                <InputText {...register('theme')} placeholder="Enter a Theme" />
              </Field>

              <Box display="none">
                <Input
                  id="edit"
                  defaultValue={0}
                  hidden={true}
                  {...register('edit', { required: true })}
                />
              </Box>
            </Flex>
            {errors.exampleRequired && <Text>This field is required</Text>}
            <Box display={formStep === 2 ? 'block' : 'none'}>
              <Label>Fields</Label>
              <Box border="1px solid" borderColor="border" mt="md">
                {fields &&
                  fields.map((f: any, index: number) => (
                    <Flex
                      key={f.id}
                      borderBottom={
                        index < fields.length - 1 ? '1px solid' : 'none'
                      }
                      borderColor="border"
                      justify="space-between"
                      alignItems="center"
                      px="sm"
                      py="sm">
                      <Flex alignItems="center" gap="sm">
                        <TextT size={14} />
                        <Text as="p">{f.name}</Text>
                      </Flex>
                      <Text as="p" color="text-secondary">
                        {f.value.field_type.name}
                      </Text>
                    </Flex>
                  ))}
              </Box>
            </Box>

            <Box mt="md">
              {hasPermission('variant', 'manage') && (
                <Button
                  variant="secondary"
                  onClick={(e) => {
                    e.preventDefault();
                    setIsOpen(true);
                  }}>
                  Edit
                </Button>
              )}
            </Box>
          </Box>
        </Box>
      </Flex>
      <Drawer
        open={isOpen}
        store={mobileMenuDrawer}
        aria-label="Menu backdrop"
        withBackdrop={true}
        onClose={() => setIsOpen(false)}>
        <Form step={formStep} setIsOpen={setIsOpen} setRerender={setRerender} />
      </Drawer>
    </>
  );
};
export default ContentTypeViewForm;
