import React, { useEffect, useState } from 'react';
import { Box, Flex, Button, Text } from 'rebass';
import { useStoreState } from 'easy-peasy';
import { useForm } from 'react-hook-form';

import Field from './Field';
import { useRouter } from 'next/router';
import { Input } from '@rebass/forms';
import styled from 'styled-components';
import { createEntity, loadEntity } from '../utils/models';

const Block = styled(Box)`
  border: solid 1px #ddd;
  padding: 5px;
  margin-bottom: 8px;
  background: #fff;
`

// Generated by https://quicktype.io

export interface States {
  total_pages: number;
  total_entries: number;
  states: StateElement[];
  page_number: number;
}

export interface StateElement {
  state: StateState;
  flow: Flow;
  creator: Creator;
}

export interface Creator {
  updated_at: string;
  name: string;
  inserted_at: string;
  id: string;
  email_verify: boolean;
  email: string;
}

export interface Flow {
  updated_at: string;
  name: string;
  inserted_at: string;
  id: string;
}

export interface StateState {
  updated_at: string;
  state: string;
  order: number;
  inserted_at: string;
  id: string;
}

export interface StateFormProps {
  content: StateElement[];
  onSave: any;
}

const StatesForm = (props: StateFormProps) => {
  const [stat, setStat] = useState('');

  const updateState = (e: React.ChangeEvent<HTMLInputElement>) => {
    setStat(e.target.value);
  };

  const AddState = () => {
    const newState = {
      state: stat,
      order: 0,
    };

    props.onSave(newState);
    setStat("")
  };

  return (
    <Box p={2}>
      <Text fontSize={2} pb={3}>All States</Text>
      {props.content && (
        <Box>
          {props.content.map((c: StateElement) => (
            <Block>
              <Text key={c.state.id}>{c.state.state}</Text>
            </Block>
          ))}
        </Box>
      )}
      <Box>
        <Input onChange={updateState} />
      </Box>
      <Button onClick={AddState}>Add State</Button>
    </Box>
  );
};

const Form = () => {
  const { register, handleSubmit, errors } = useForm();
  const [edit, setEdit] = useState<boolean>(false);
  const [content, setContent] = useState<StateElement[]>();

  const token = useStoreState(state => state.auth.token);

  // determine edit state based on URL
  const router = useRouter();
  const cId: string = router.query.id as string;

  /**
   * Map states to types, and states
   * @param data 
   */
  const loadStatesSuccess = (data:any) => {
    const res: States = data;
    setContent(res.states);
  }

  /**
   * Load all states for a particular Flow
   * @param id flow id
   * @param t  token
   */
  const loadStates = (id: string, t: string) => {
    const tok = token ? token : t;
    loadEntity(tok, `flows/${id}/states`, loadStatesSuccess)    
  };

  /**
   * Create State
   * @param data Form Data
   */
  const CreateState = (data: any) => {
    createEntity(data, `flows/${cId}/states`, token);
  };

  /**
   * Submit Form
   * @param data Form Data
   */
  const onSubmit = (data: any) => {
    createEntity(data, 'flows', token);
  };

  useEffect(() => {
    if (cId && cId.length > 0) {
      setEdit(true);
      loadStates(cId, token);
    }
  }, [cId, token]);

  return (
    <Box py={3} width={1} mt={4}>
      <Box>
        <Text variant="pagetitle">Create Flows</Text>
      </Box>
      <Box>
        <Flex>
          <Box width={7 / 12}>
            <Box
              mx={0}
              mb={3}
              width={1}
              as="form"
              onSubmit={handleSubmit(onSubmit)}>
              <Field
                name="name"
                label="Name"
                defaultValue="Sample Name"
                register={register}
              />
              <Button type="submit" ml={2} mt={3}>
                Create
              </Button>
            </Box>
            <Box p={3} mt={2} bg="#efefef">
              {edit && content && (
                <StatesForm content={content} onSave={CreateState} />
              )}
            </Box>
          </Box>

          {errors.exampleRequired && <Text>This field is required</Text>}
        </Flex>
      </Box>
    </Box>
  );
};
export default Form;
