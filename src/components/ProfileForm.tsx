import React, { useEffect, useState } from 'react';
import { Box, Flex, Button, Text, Image } from 'rebass';
import { useForm } from 'react-hook-form';

import { Input, Label, Select } from '@rebass/forms';

import Field from './Field';
import { loadEntity, updateEntityFile } from '../utils/models';
import { useStoreState } from 'easy-peasy';

// import dateFnsFormat from 'date-fns/format';
// import DayPicker, { DateUtils } from 'react-day-picker';

export interface Profile {
  uuid: null;
  user: User;
  profile_pic: null;
  name: string;
  gender: null;
  dob: null;
}

export interface User {
  id: string;
  email: string;
}

// Generated by https://quicktype.io

export interface IAccount {
  updated_at: string;
  role: string;
  profile_pic: null;
  name: string;
  inserted_at: string;
  id: string;
  email_verify: boolean;
  email: string;
}

// Generated by https://quicktype.io

const Form = () => {
  const { register, handleSubmit, errors, setValue } = useForm();
  const token = useStoreState(state => state.auth.token);
  const [me, setMe] = useState<IAccount>();
  const [profile, setProfile] = useState<Profile>();
  // const [showDate, setShowDate] = useState<boolean>(false);
  // const profilex = useStoreState(state => state.profile.data);
  // const dispatch = useDispatch();

  const onUpdate = (d: any) => {
    console.log('Updated', d);
    console.log('me', me);
  };

  // const toggleDate = () => {
  //   setShowDate(!showDate);
  // };

  /**
   * Submit Form
   * @param data Form Data
   */
  const onSubmit = (data: any) => {
    // const id: string = me && me.id;

    // console.log('data.profile_pic', data)

    const formData = new FormData();
    formData.append('[profile][name]', data.name);
    formData.append('[profile][dob]', data.dob);
    formData.append('[profile][code]', data.code);
    formData.append('[profile][profile_pic]', data.profile_pic[0]);
    formData.append('[profile][gender]', data.gender);
    formData.append('[profile][calory_range_id]', data.calory_range_id);

    updateEntityFile(`profiles`, formData, token, onUpdate);
  };

  // const formatDate = (date: any, format: string) => {
  //   return dateFnsFormat(date, format);
  // };

  const onMe = (data: any) => {
    const meme: IAccount = data;
    console.log('Me', meme);
    setMe(meme);
  };

  const onOrg = (data: Profile) => {
    setProfile(data);

    if (data) {
      setValue('name', data.name);
      setValue('dob', data.dob);
      setValue('gender', data.gender);
    }
  };

  useEffect(() => {
    const tokenInline = token;
    loadEntity(tokenInline, 'users/me', onMe);
    //
    if (tokenInline) {
      // dispatch({ type: 'LOGIN_SUCCESS', payload: tokenInline });
      loadEntity(tokenInline, 'users/me', onMe);
    }
  }, []);

  useEffect(() => {
    if (token) {
      loadEntity(token, `profiles`, onOrg);
    }
  }, [token]);

  // const dateChange = (day: Date) => {
  //   const FORMAT = 'yyyy-MM-dd';
  //   if (DateUtils.isDate(day)) {
  //     const m = formatDate(day, FORMAT);
  //     setValue('dob', m);
  //   }
  //   // toggleDate();
  // };

  return (
    <Box py={3} width={1} mt={4}>
      <Box>
        <Text variant="pagetitle">My Profile</Text>
      </Box>
      <Box>
        <Flex>
          <Box width={7 / 12}>
            <Box
              mx={0}
              mb={3}
              width={1}
              as="form"
              onSubmit={handleSubmit(onSubmit)}>
              <Field
                name="name"
                label="Name"
                defaultValue="Your Full Name"
                register={register}
              />
              <Box>
                <Flex>
                  {profile && profile.profile_pic && (
                    <Box mr={3}>
                      <Image
                        src={'http://localhost:4000' + profile.profile_pic}
                        width={100}
                      />
                    </Box>
                  )}
                  <Box>
                    <Label htmlFor="screenshot" mb={1}>
                      Profile
                    </Label>
                    <Input
                      id="profile_pic"
                      name="profile_pic"
                      type="file"
                      ref={register()}
                    />
                  </Box>
                </Flex>
              </Box>
              <Field
                name="dob"
                label="Birthday"
                defaultValue="1992-09-24"
                register={register}
                // onClick={toggleDate}
                // onChange={dateChange}
              />
              {/* {showDate && <DayPicker onDayClick={dateChange} />} */}
              
              <Label>Gender</Label>
              <Select name="gender" ref={register({ required: true })}>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
              </Select>

              <Label>Calorie Range</Label>
              <Select name="calory_range_id" ref={register({ required: true })}>
                <option value="006bce5a-ec1a-4210-890c-bf4817addaa1">1000-1200</option>
                <option value="64d5fd8d-6726-4b9b-81ff-f367b249307d">1200-1400</option>
              </Select>

              {/* <Box py={4}>
                <Text variant="pagetitle">My Profile</Text>
                <Flex>
                  <Field
                    name="calories"
                    label="Calories"
                    defaultValue="2400"
                    register={register}
                  />
                  <Field
                    name="prefs"
                    label="Preference"
                    defaultValue="Weight Loss"
                    register={register}
                  />
                </Flex>
                <Field
                  name="height"
                  label="Height"
                  defaultValue="174cm"
                  register={register}
                />
                <Field
                  name="weight"
                  label="Weight"
                  defaultValue="69kg"
                  register={register}
                />
              </Box> */}
              <Button type="submit" ml={2} mt={3}>
                Update Profile
              </Button>
            </Box>
          </Box>

          {errors.exampleRequired && <Text>This field is required</Text>}
        </Flex>
      </Box>
    </Box>
  );
};
export default Form;
