import React, { useEffect, useState } from 'react';
import { Box, Flex, Button, Text, Image, Spinner } from 'theme-ui';
import { useForm } from 'react-hook-form';

import { Label, Select } from '@rebass/forms';

import Field from './Field';
import FieldDate from './FieldDate';
import { loadEntity, updateEntityFile } from '../utils/models';
import { useStoreState } from 'easy-peasy';

import ImageCropper from './ImageCropper';

import Modal from 'react-modal';

// import dateFnsFormat from 'date-fns/format';
// import DayPicker, { DateUtils } from 'react-day-picker';

const customStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.75)',
  },
  content: {
    position: 'absolute',
    top: '20%',
    left: '20%',
    right: '20%',
    bottom: '20%',
    border: '1px solid #ccc',
    background: '#fff',
    overflow: 'auto',
    WebkitOverflowScrolling: 'touch',
    borderRadius: '4px',
    outline: 'none',
    padding: '20px',
  },
};

export interface Profile {
  uuid: null;
  user: User;
  profile_pic: null;
  name: string;
  gender: null;
  dob: null;
}

export interface User {
  id: string;
  email: string;
}

// Generated by https://quicktype.io

export interface IAccount {
  updated_at: string;
  role: string;
  profile_pic: null;
  dob?: string;
  name: string;
  inserted_at: string;
  id: string;
  email_verify: boolean;
  email: string;
}

interface IPreviewImage {
  prevImage: any;
  prevImageFile: any;
}

const Form = () => {
  const { register, handleSubmit, errors, setValue } = useForm();
  const token = useStoreState(state => state.auth.token);
  const [me, setMe] = useState<IAccount>();
  const [profile, setProfile] = useState<Profile>();
  const [image, setImage] = useState<any>();
  const [imagePreview, setImagePreview] = useState<string>();
  const [imageTemp, setImageTemp] = useState<any>();
  const [imageSaved, setImageSaved] = useState<boolean>(false);
  const [isEdit, setEdit] = useState<boolean>(false);
  const [saving, setSaving] = useState<boolean>(false);

  const [showModal, setModal] = useState<boolean>(false);
  function closeModal() {
    setModal(false);
  }

  function toggleModal() {
    setModal(!showModal);
  }

  const [cropImage, setCroppedImage] = useState<File>(); // for file submit
  // const [editing, setEditing] = useState<boolean>(false);

  useEffect(() => {
    // console.log('setPreviewImage', image, imagePreview);
  }, [image, imagePreview]);

  const setPreviewImage = ({ prevImage, prevImageFile }: IPreviewImage) => {
    console.log('setPreviewImage', prevImage);
    setCroppedImage(prevImageFile);
    setImageTemp(prevImage);
    // toggleModal();
    setEdit(!isEdit);
    setImagePreview(prevImage);
    setImageSaved(true);
  };

  const toggleEdit = () => {
    setEdit(!isEdit);
    // toggleModal();
  };

  // const [showDate, setShowDate] = useState<boolean>(false);
  // const profilex = useStoreState(state => state.profile.data);
  // const dispatch = useDispatch();

  const onUpdate = (d: any) => {
    setSaving(false);
    console.log('Updated', d);
    console.log('me', me);
  };

  // const toggleDate = () => {
  //   setShowDate(!showDate);
  // };

  /**
   * Submit Form
   * @param data Form Data
   */
  const onSubmit = (data: any) => {
    // const id: string = me && me.id;

    console.log('data.profile_pic', data);

    setSaving(true);

    const formData = new FormData();
    formData.append('name', data.name);
    formData.append('dob', data.dob);

    if (cropImage) {
      formData.append('profile_pic', cropImage);
    }

    formData.append('gender', data.gender);

    updateEntityFile(`profiles`, formData, token, onUpdate);
  };

  // const _onMe = (data: any) => {
  //   const meme: IAccount = data;
  //   console.log('Me', meme);
  //   setMe(meme);
  // };

  const onCropped = (_cp: any) => {
    setPreviewImage(_cp);
  };

  const dateChange = (_p: any) => {
    console.log('dateChange', _p);
  };

  const onOrg = (data: Profile) => {
    setProfile(data);

    if (data) {
      setValue('name', data.name);

      if(data.dob) {
        setValue('dob', data.dob);
      }      
      setValue('gender', data.gender);
      const img = 'http://localhost:4000' + data?.profile_pic;
      setImage(img);
    }
  };

  useEffect(() => {
    if (token) {
      loadEntity(token, `profiles`, onOrg);
    }
  }, [token]);

  const getBase64 = (file: any) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  };

  useEffect(() => {
    try {
      if (imageTemp && imageTemp.size > 0) {
        getBase64(imageTemp).then((_e: any) => {
          console.log('imageTemp', _e);
          setImagePreview(_e);
        });
      }
    } catch (error) {
      console.log('errr', error);
    }
  }, [imageTemp]);

  return (
    <Box py={3} mt={4} pl={4} variant="w50">
      <Box sx={{ pb: 5}}>
        <Text variant="pagetitle" sx={{ mb: 0}}>My Account</Text>
        <Text sx={{ fontSize: 1}}>Your account settings</Text>
      </Box>
      <Box variant="w100">
        <Flex variant="w100">
          <Box variant="w33">
            <Text sx={{ fontWeight: 'heading', mb: 1}}>My Profile</Text>
            <Text sx={{ fontWeight: 'body', mb: 1}}>Notifications</Text>
            <Text sx={{ fontWeight: 'body', mb: 1}}>Settings</Text>
          </Box>
          <Box variant="w100">
            <Box mx={0} mb={3} as="form" onSubmit={handleSubmit(onSubmit)}>
              <Field
                name="name"
                label="Name"
                defaultValue="Your Full Name"
                register={register}
              />
              <Box>
                <Flex>
                  {profile && profile.profile_pic && (
                    <Flex sx={{ flexWrap: 'wrap' }} pr={4} pb={4}>
                      <Box>
                        {/* {!isEdit && imageSaved && (
                          <Image
                            sx={{ width: '80px', height: '80px' }}
                            src={`http://localhost:4000${profile?.profile_pic}`}
                          />
                        )} */}
                        {!isEdit && !imageSaved && (
                          <>
                            <Image
                              sx={{ width: '80px', mr: 3, mt: 2, height: '80px', borderRadius: 99, border: 'solid 1px', borderColor: 'gray.3' }}
                              src={`http://localhost:4000${profile?.profile_pic}`}
                            />
                          </>
                        )}
                        {isEdit && (
                          <Modal
                            style={customStyles}
                            isOpen={true}
                            onRequestClose={closeModal}
                            ariaHideApp={false}
                            contentLabel="Example Modal">
                            <Box>
                              <ImageCropper
                                onFileSubmit={setPreviewImage}
                                onComplete={onCropped}
                              />
                            </Box>
                          </Modal>
                        )}
                      </Box>

                      {imagePreview && imageSaved && (
                        <>
                          <Image
                            src={imagePreview}
                            sx={{ width: '80px', mr: 3, mt: 2, height: '80px', borderRadius: 3, border: 'solid 1px', borderColor: 'gray.3' }}
                          />
                        </>
                      )}
                      <Button variant="secondary" onClick={() => toggleEdit()}>
                        Edit
                      </Button>
                    </Flex>
                  )}
                </Flex>
              </Box>
              <FieldDate
                name="dob"
                label="Birthday"
                register={register}
                sub="Date"
                // defaultValue="1988-01-15"
                // onClick={toggleDate}
                onChange={dateChange}
              />
              <Label>Gender</Label>
              <Select name="gender" ref={register({ required: true })}>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
              </Select>
              <Button type="submit" ml={0} mt={3}>
                {saving && <Spinner width={16} height={16} color="white"/>}
                {!saving && <Text>Save</Text>}
              </Button>
            </Box>
          </Box>

          {errors.exampleRequired && <Text>This field is required</Text>}
        </Flex>
      </Box>
    </Box>
  );
};
export default Form;
